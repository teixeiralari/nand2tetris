// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array _string;
    field int _maxlength, _length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        let _maxlength = maxLength;

        if (maxLength = 0)
        {
            let _string = null;
        }
        else
        {
            let _string = Array.new(maxLength);
        }

        let _length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return _length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return _string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let _string[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(_length = _maxlength))
        {
            let _string[_length] = c;
            let _length = _length + 1;
        }
        return _string;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        if (_length > 0)
        {
            let _length = _length - 1;
        }
        return;
    }

    method bool isDigit(char c)
    {
        return ((c > 47) & (c < 58))
    } 
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var bool negative;
        var int i, value, character, _break;

        let value = 0;
        
        //a = "abc-1"
        if((_length > 0) & (_string[0] = 45)
        {
            let negative = true;
            let i = 1;
        }
        else
        {
          let negative = false;
            let i = 0;  
        }


        while((i < _length) & (~break)
        {
            let character = _string[i] - 48;
            let value = character
            if((String.isDigit(_string[i]))
            {
                let _break = true
            }
            else
            {
                let i = i + 1;
            }
            
        }

        if (negative)
        {
            let value = -value;
        }

        return value;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
         let _length = 0;    // Clear string
        
        if( val < 0 ) {
            let number = -val;
            do appendChar(45);      // leading '-'
        }
        
        do int2string(number);
        return;
    }

    function char digit_char(int i) {
        return i + 48;
    }

    method void int2string(int number) {
        var int q;
        var int mod;
        var char c;
        
        let q = number / 10;
        let mod = number - (q*10);
        let c = String.digit_char(mod);
        
        if( number < 10 ) {
            do appendChar(c);
        }
        else {
            do int2string(q);
            do appendChar(c);
        }
        return;
    }

     /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
